import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'firebase_options.dart'; // <-- Firebase options generated by FlutterFire CLI
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:tailorapptask/pages/homepage.dart';
import 'package:tailorapptask/authentication/authkey.dart';
import 'package:tailorapptask/services/supabase_stuff.dart';
import 'package:tailorapptask/authentication/authentication.dart';
import 'package:tailorapptask/services/notification_feature.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase with generated options
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Register top-level background handler BEFORE runApp
  FirebaseMessaging.onBackgroundMessage(firebaseMessagingBackgroundHandler);

  // Initialize Supabase
  await Supabase.initialize(url: supabaseUrl, anonKey: supabaseAnonKey);

  // Local notification & FCM handlers
  await NotificationService.init();

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Todo Reminder',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        colorSchemeSeed: Colors.orange,
      ),
      home: const AuthGate(),
      // home: HomePage(),
    );
  }
}

class AuthGate extends StatefulWidget {
  const AuthGate({super.key});

  @override
  State<AuthGate> createState() => _AuthGateState();
}

class _AuthGateState extends State<AuthGate> {
  late final SupabaseClient _client;
  bool _loading = true;
  Session? _session;

  @override
  void initState() {
    super.initState();
    _client = Supabase.instance.client;

    // Listen to auth state changes
    _client.auth.onAuthStateChange.listen((event) async {
      _session = event.session;

      if (_session != null) {
        final user = _client.auth.currentUser!;
        final token = await NotificationService.getToken();

        // Upsert profile with token + metadata
        await SB.upsertProfile(
          userId: user.id,
          name: user.userMetadata?['full_name'] ?? user.email,
          avatarUrl: user.userMetadata?['avatar_url'],
          fcmToken: token,
        );
      }

      if (mounted) setState(() {});
    });

    // Check current session at startup
    _session = _client.auth.currentSession;

    // Remove loading after first frame
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) setState(() => _loading = false);
    });
  }

  @override
  Widget build(BuildContext context) {
    if (_loading) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    // Show LoginPage if no session, else HomePage
    return _session == null ? const HomePage() : const LoginPage();
  }
}
