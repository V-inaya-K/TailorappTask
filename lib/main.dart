import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'firebase_options.dart'; // Firebase options generated by FlutterFire CLI
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:tailorapptask/pages/homepage.dart';
import 'package:tailorapptask/authentication/authentication.dart';
import 'package:tailorapptask/services/notification_feature.dart';
import 'package:tailorapptask/services/supabase_stuff.dart';
import 'package:tailorapptask/authentication/authkey.dart';
Future<void> firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  print('Handling a background message: ${message.messageId}');
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  FirebaseMessaging.onBackgroundMessage(firebaseMessagingBackgroundHandler);
  await Supabase.initialize(
    url: supabaseUrl,
    anonKey: supabaseAnonKey,
  );
  await NotificationService.init();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tailor App',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        colorSchemeSeed: Colors.orange,
      ),
      home: const AuthGate(),
    );
  }
}
class AuthGate extends StatefulWidget {
  const AuthGate({super.key});
  @override
  State<AuthGate> createState() => _AuthGateState();
}
class _AuthGateState extends State<AuthGate> {
  late final SupabaseClient _client;
  Session? _session;
  bool _loading = true;
  @override
  void initState() {
    super.initState();
    _client = Supabase.instance.client;
    _client.auth.onAuthStateChange.listen((event) async {
      _session = event.session;

      if (_session != null) {
        final user = _client.auth.currentUser!;
        final token = await NotificationService.getToken();
        await SB.upsertProfile(
          userId: user.id,
          name: user.userMetadata?['full_name'] ?? user.email,
          avatarUrl: user.userMetadata?['avatar_url'],
          fcmToken: token,
        );
      }

      if (mounted) setState(() {});
    });
    _session = _client.auth.currentSession;
    _loading = false;
  }

  @override
  Widget build(BuildContext context) {
    if (_loading) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }
    return _session == null ? const LoginPage() : const HomePage();
  }
}
